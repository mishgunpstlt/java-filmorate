CREATE TABLE IF NOT EXISTS films (
  film_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar,
  description varchar(200),
  releaseDate date,
  duration integer,
  mpa_id integer
);

CREATE TABLE IF NOT EXISTS film_genre (
  film_id integer,
  genre_id integer,
  PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS users (
  user_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email varchar,
  login varchar,
  name varchar,
  birthday date
);

CREATE TABLE IF NOT EXISTS genres (
  genre_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar
);

CREATE TABLE IF NOT EXISTS mpas (
  mpa_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  description varchar
);

CREATE TABLE IF NOT EXISTS likes (
  user_id integer,
  film_id integer,
  PRIMARY KEY (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS friends (
  requester_id integer,
  addressee_id integer,
  status_id integer,
  PRIMARY KEY (requester_id, addressee_id)
);

CREATE TABLE IF NOT EXISTS status (
  status_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar
);

-- Создание таблицы directors
CREATE TABLE IF NOT EXISTS directors (
  director_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL
);

-- Создание таблицы film_director для связи многие-ко-многим
CREATE TABLE IF NOT EXISTS film_director (
  film_id INTEGER NOT NULL,
  director_id INTEGER NOT NULL,
  PRIMARY KEY (film_id, director_id),
  FOREIGN KEY (film_id) REFERENCES films(film_id),
  FOREIGN KEY (director_id) REFERENCES directors(director_id)
);

-- Создание таблицы отзывов
CREATE TABLE IF NOT EXISTS reviews (
    review_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content VARCHAR(1000) NOT NULL,
    is_positive BOOLEAN NOT NULL,
    user_id INTEGER NOT NULL,
    film_id INTEGER NOT NULL,
    useful INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users (user_id),
    FOREIGN KEY (film_id) REFERENCES films (film_id)
);

CREATE TABLE IF NOT EXISTS review_likes (
    review_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    is_like BOOLEAN NOT NULL,
    PRIMARY KEY (review_id, user_id),
    FOREIGN KEY (review_id) REFERENCES reviews (review_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id)
);

ALTER TABLE films ADD FOREIGN KEY (mpa_id) REFERENCES mpas(mpa_id);
CREATE TABLE IF NOT EXISTS feed (
	event_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	event_type_id integer,
	operation_id integer,
	event_time timestamp,
	user_id integer,
	entity_id integer
);

CREATE TABLE IF NOT EXISTS event_type (
	type_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	type varchar
);

CREATE TABLE IF NOT EXISTS operation (
	operation_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	operation varchar
);

ALTER TABLE films ADD FOREIGN KEY (mpa_id) REFERENCES mpas (mpa_id);

ALTER TABLE film_genre ADD FOREIGN KEY (film_id) REFERENCES films (film_id);

ALTER TABLE film_genre ADD FOREIGN KEY (genre_id) REFERENCES genres (genre_id);

ALTER TABLE likes ADD FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE likes ADD FOREIGN KEY (film_id) REFERENCES films (film_id);

ALTER TABLE friends ADD FOREIGN KEY (requester_id) REFERENCES users (user_id);

ALTER TABLE friends ADD FOREIGN KEY (addressee_id) REFERENCES users (user_id);

ALTER TABLE friends ADD FOREIGN KEY (status_id) REFERENCES status (status_id);

ALTER TABLE feed ADD FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE feed ADD FOREIGN KEY (event_type_id) REFERENCES event_type (type_id);

ALTER TABLE feed ADD FOREIGN KEY (operation_id) REFERENCES operation (operation_id);
